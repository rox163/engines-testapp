Index: lib/tasks/try-each.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lib/tasks/try-each.js	(date 1453626904000)
+++ lib/tasks/try-each.js	(revision )
@@ -22,14 +22,17 @@
       });
     });
 
+    console.log('>Setup');
     return task.ScenarioManager.setup().then(function() {
       return mapSeries(scenarios, task._runCommandForThisScenario, task);
     }).then(function(results) {
+      console.log('> Print results');
       return task._optionallyCleanup(options).then(function() {
         task._printResults(results);
         task._exitAsAppropriate(results);
       });
     }).catch(function(err) {
+      console.log('ERRROROROROROR!!!!');
       task.ui.writeLine(chalk.red('Error!'));
       if (err) {
         task.ui.writeLine(chalk.red(err));
@@ -41,12 +44,14 @@
 
   _runCommandForThisScenario: function(scenario) {
     var task = this;
+    console.log('>> Changing to ' + scenario.name);
     return task.ScenarioManager.changeTo(scenario)
       .then(function(scenarioDependencyState) {
         var runResults = {
           scenario: scenario.name,
           dependencyState: scenarioDependencyState
         };
+        console.log('>> Going to run command');
         return task._runCommand().then(function(result) {
           runResults.result = result;
           return RSVP.resolve(runResults);
Index: lib/utils/npm-adapter.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lib/utils/npm-adapter.js	(revision )
+++ lib/utils/npm-adapter.js	(revision )
@@ -0,0 +1,108 @@
+var CoreObject    = require('core-object');
+var fs            = require('fs-extra');
+var RSVP          = require('rsvp');
+var path          = require('path');
+var findEmberPath = require('./find-ember-path');
+var extend        = require('extend');
+var rimraf        = RSVP.denodeify(require('rimraf'));
+
+module.exports = CoreObject.extend({
+  init: function() {
+    this._super.apply(this, arguments);
+    this.run = this.run || require('./run');
+  },
+  packageJSON: 'package.json',
+  packageJSONBackupFileName: 'package.json.ember-try',
+  setup: function() {
+    return this._backupPackageJSON();
+  },
+  changeToDependencySet: function(depSet) {
+    var adapter = this;
+    var backupPackageJSON = path.join(adapter.cwd, adapter.packageJSONBackupFileName);
+    var packageJSONFile = path.join(adapter.cwd, adapter.packageJSON);
+    var packageJSON = JSON.parse(fs.readFileSync(backupPackageJSON));
+    var newPackageJSON = adapter._packageJSONForDependencySet(packageJSON, depSet);
+
+    fs.writeFileSync(packageJSONFile, JSON.stringify(newPackageJSON, null, 2));
+    return adapter._install().then(function() {
+      var deps = extend({}, depSet.dependencies || {}, depSet.devDependencies || {});
+      var currentDeps = Object.keys(deps).map(function(dep) {
+        return {
+          name: dep,
+          versionExpected: deps[dep],
+          versionSeen: adapter._findCurrentVersionOf(dep)
+        };
+      });
+      return RSVP.Promise.resolve(currentDeps);
+    });
+  },
+  cleanup: function() {
+    var adapter = this;
+    return adapter._restoreOriginalPackageJSONFile().then(function() {
+      return RSVP.all([rimraf(path.join(adapter.cwd, adapter.packageJSONBackupFileName)),
+      rimraf(path.join(adapter.cwd, '.node_modules.ember-try'))]);
+    }).catch(function(e) {
+      console.log('Error cleaning up npm scenario:', e);
+    })
+    .then(function() {
+      return adapter._install();
+    });
+  },
+  _findCurrentVersionOf: function(packageName) {
+    //Can we do this programmatically?
+    var filename = path.join(this.cwd, 'node_modules', packageName, 'package.json');
+    if (fs.existsSync(filename)) {
+      return JSON.parse(fs.readFileSync(filename)).version;
+    } else {
+      throw 'File ' + filename + ' does not exist';
+    }
+  },
+  _install: function() {
+    var adapter = this;
+
+    return adapter.run('npm', ['install'], {cwd: adapter.cwd});
+  },
+  _packageJSONForDependencySet: function(packageJSON, depSet) {
+
+    this._overridePackageJSONDependencies(packageJSON, depSet, 'dependencies');
+    this._overridePackageJSONDependencies(packageJSON, depSet, 'devDependencies');
+
+    return packageJSON;
+  },
+  _overridePackageJSONDependencies: function(packageJSON, depSet, kindOfDependency) {
+    if (!depSet[kindOfDependency]) { return; }
+    var pkgs = Object.keys(depSet[kindOfDependency]);
+
+    pkgs.forEach(function(pkg) {
+      packageJSON[kindOfDependency][pkg] = depSet[kindOfDependency][pkg];
+    });
+  },
+  _restoreOriginalPackageJSONFile: function() {
+    var copy = RSVP.denodeify(fs.copy);
+    return RSVP.all([
+      copy(path.join(this.cwd, this.packageJSONBackupFileName),
+           path.join(this.cwd, this.packageJSON)),
+      copy(path.join(this.cwd, '.node_modules.ember-try'),
+           path.join(this.cwd, 'node_modules'), {clobber: true})]);
+  },
+  _backupPackageJSON: function() {
+    var copy = RSVP.denodeify(fs.copy);
+    return RSVP.all([copy(path.join(this.cwd, this.packageJSON),
+      path.join(this.cwd, this.packageJSONBackupFileName)),
+      copy(path.join(this.cwd, 'node_modules'), path.join(this.cwd, '.node_modules.ember-try'), {clobber: true})]);
+  }
+});
+
+//Naive but works?? Do I need to remove node_modules? WHy?
+//TODO: different subkey, switch on package manager (or do both)
+//What if some packages are in one set but not the next? Backup node_modules?
+//
+//Backup node_modules/
+//Change package.json
+//Run npm install
+//Run command
+//Restore node_modules/
+//Repeat
+
+
+//TODO: tRy on another package
Index: lib/utils/run-command.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lib/utils/run-command.js	(date 1453626904000)
+++ lib/utils/run-command.js	(revision )
@@ -11,6 +11,7 @@
       return RSVP.resolve(true);
     })
     .catch(function(errorCode) {
+      console.log('Catching Error: ', errorCode);
       if (errorCode != 1) {
         return RSVP.reject('The command ' + commandArgs.join(' ') + ' exited ' + errorCode);
       } else {
Index: lib/utils/scenario-manager.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lib/utils/scenario-manager.js	(date 1453626904000)
+++ lib/utils/scenario-manager.js	(revision )
@@ -1,11 +1,12 @@
 var CoreObject   = require('core-object');
 var BowerAdapter = require('./bower-adapter');
+var NpmAdapter = require('./npm-adapter');
 var Chalk        = require('chalk');
 
 module.exports = CoreObject.extend({
   init: function() {
     this._super.apply(this, arguments);
-    this.dependencyManagerAdapter = this.dependencyManagerAdapter || new BowerAdapter({cwd: this.project.root});
+    this.dependencyManagerAdapter = this.dependencyManagerAdapter || new NpmAdapter({cwd: this.project.root});
   },
 
   setup: function() {
Index: lib/utils/config.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lib/utils/config.js	(date 1453626904000)
+++ lib/utils/config.js	(revision )
@@ -22,21 +22,15 @@
                              the consuming app's bower.json */
       },
       {
-        name: 'ember-release',
+        name: 'jscs-release',
         dependencies: {
-          ember: 'release'
+          jscs: '^2.0.0'
         }
       },
       {
-        name: 'ember-beta',
+        name: 'jscs-beta',
         dependencies: {
-          ember: 'beta'
-        }
-      },
-      {
-        name: 'ember-canary',
-        dependencies: {
-          ember: 'canary'
+          jscs: '^1.0.0'
         }
       }
     ]
